const path = require('node:path');
const { readdir, readFile, writeFile, lstat } = require('node:fs/promises');
const { pascalCase } = require('scule');
const { XMLParser } = require('fast-xml-parser');

const PREFIX = 'ri-';
const TARGET = 'src/all-icons.ts';

function resolveRoot(...dir) {
  return path.resolve(__dirname, '..', ...dir);
}

function resolveRemixIconDir() {
  return resolveRoot('node_modules', 'remixicon', 'icons');
}

function resolveCustomIconDir() {
  return resolveRoot('src', 'custom-icons');
}

async function loop(data, cb) {
  for (const el of data) {
    await cb(el);
  }
}

function getPathFromSvgString(svg) {
  const parser = new XMLParser({
    ignoreAttributes: false,
  });
  const obj = parser.parse(svg);
  return obj.svg.path['@_d'];
}

async function getAllSvgDataFromPath(pathDir) {
  const type = await lstat(pathDir);

  if (type.isDirectory()) {
    const res = [];
    const dirs = await readdir(pathDir);
    await loop(dirs, async (child) => {
      res.push(...(await getAllSvgDataFromPath(`${pathDir}/${child}`)));
    });
    return res;
  } else if (type.isFile()) {
    const name = PREFIX + path.basename(pathDir).replace('.svg', '');
    const generatedName = pascalCase(name);
    const svg = await readFile(pathDir, 'utf8');
    const svgPath = getPathFromSvgString(svg);

    return [
      {
        name,
        generatedName,
        svgPath,
      },
    ];
  }
}

async function collectAllIconMetas() {
  const dirs = [resolveRemixIconDir(), resolveCustomIconDir()];
  const res = [];

  await loop(dirs, async (dir) => {
    res.push(...(await getAllSvgDataFromPath(dir)));
  });

  return res;
}

async function generate() {
  const metadata = await collectAllIconMetas();
  const fileContent = await collectIconConstantString(metadata);
  await writeFile(resolveRoot(TARGET), fileContent, 'utf8');
}

async function collectIconConstantString(icons) {
  let iconsFile = `// Generated by scripts/generate-icons.js
/* eslint-disable */
/* prettier-ignore */
import { type GeneratedIcon } from '@/types/icons';\n
`;

  const names = [];

  await loop(icons, (icon) => {
    iconsFile += `export const ${icon.generatedName}: GeneratedIcon = {
  name: '${icon.name}',
  path: '${icon.svgPath}',
};\n`;

    names.push(icon.name);
  });

  iconsFile += `export type RuiIcons = ${names
    .map((x) => `"${x.replace('ri-', '')}"`)
    .join(' | ')};\n`;
  return iconsFile;
}

generate();
